@model IEnumerable<BaseDeProjetos.Models.Projeto>
@{

}
<div>
    <div class="pb-4">
        <div class="app-card app-card-chart shadow-sm h-100">
            <div class="app-card-header p-3">
                <h4 class="app-card-title">Projetos dos Institutos</h4>
            </div>
            <div class="app-card-body p-4">
                <figure class="col-12 highcharts-figure">
                    <div id="projetos"</div>
                </figure>
            </div>
        </div>
    </div>
</div>

<script>
    const projetosId = "projetos";
    const projetosElem = document.querySelector(`#${projetosId}`);
    const classesLoading = ['spinner-border', 'text-primary'];

    async function fetchDadosGrafico() {
        let fetchedData = null;
        await fetch("/Projetos/RetornarDadosGrafico")
            .then(response => response.json())
            .then(data => {
                if (data) {
                    fetchedData = data;
                } else {
                    console.error("Não temos dados para exibir no gráfico");
                }
            })
            .catch(err => {
                console.error(`Houve um erro na obtenção dos dados do gráfico: ${err}`);
            });
        return fetchedData;
    }


    function obterSeries(data) {
        let series = []
        if (data) {
            data.map(entrada => {
                series.push({
                    name: `${entrada['Casa']}`,
                    data: [
                        entrada['ProjetosANP'].length,
                        entrada['ProjetosAgenciaFomento'].length,
                        entrada['ProjetosContratacaoDireta'].length,
                        entrada['ProjetosEditalInovacao'].length,
                        entrada['ProjetosEmbrapii'].length,
                        entrada['ProjetosIndefinido'].length]
                })
            });
            return series;
        } else {
            console.error(`Os dados estão vazios: ${data}`);
            return null;
        }
    }

    function exibirGrafico(data) {
        let chart = Highcharts.chart('projetos', {
            chart: {
                type: 'column'
            },
            title: {
                text: null
            },
            xAxis: {
                // TODO: Definir de forma dinâmica um dia?
                categories: [
                    'ANP',
                    'Agências de Fomento',
                    'Contratação Direta',
                    'Editais de inovação SESI/SENAI',
                    'Embrapii',
                    // 'Parceiros de Edital', não estava no controller?
                    'A definir',
                ],
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Projetos'
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} projetos </b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            series: obterSeries(data)
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        fetchDadosGrafico().then(data => {
            if (data) {
                projetosElem.classList.remove(...classesLoading);
                exibirGrafico(data);
            }
            else {
                console.error("Os dados estão nulos?");
            }
        });
    });

    projetosElem.classList.add(...classesLoading);
</script>