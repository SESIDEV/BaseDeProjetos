@model IEnumerable<BaseDeProjetos.Models.Prospeccao>
<style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
        border: 3px solid;
    }
</style>
@{
    var cd_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.ContratacaoDireta && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var cd_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.ContratacaoDireta && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var cd_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.ContratacaoDireta && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var cd_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.ContratacaoDireta && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var cd_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.ContratacaoDireta && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var cd_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.ContratacaoDireta && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    var ei_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.EditalInovacao && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var ei_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.EditalInovacao && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var ei_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.EditalInovacao && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var ei_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.EditalInovacao && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var ei_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.EditalInovacao && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var ei_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.EditalInovacao && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    var af_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.AgenciaFomento && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var af_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.AgenciaFomento && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var af_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.AgenciaFomento && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var af_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.AgenciaFomento && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var af_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.AgenciaFomento && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var af_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.AgenciaFomento && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    var emb_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.Embrapii && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var emb_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.Embrapii && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var emb_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.Embrapii && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var emb_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.Embrapii && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var emb_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.Embrapii && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var emb_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.Embrapii && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    var ou_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.Indefinida && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var ou_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.Indefinida && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var ou_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.Indefinida && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var ou_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.Indefinida && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var ou_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.Indefinida && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var ou_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.Indefinida && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    var par_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.Parceiro && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var par_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.Parceiro && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var par_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.Parceiro && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var par_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.Parceiro && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var par_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.Parceiro && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var par_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.Parceiro && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    var anp_CI = Model.Where(p => p.TipoContratacao == TipoContratacao.ANP && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ContatoInicial).Count() > 0).ToList().Count();
    var anp_EDBL = Model.Where(p => p.TipoContratacao == TipoContratacao.ANP && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_BuscaLiteratura).Count() > 0).ToList().Count();
    var anp_EDDI = Model.Where(p => p.TipoContratacao == TipoContratacao.ANP && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DraftIdeias).Count() > 0).ToList().Count();
    var anp_EDDDE = Model.Where(p => p.TipoContratacao == TipoContratacao.ANP && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_DesenhoExperimental).Count() > 0).ToList().Count();
    var anp_EDEP = Model.Where(p => p.TipoContratacao == TipoContratacao.ANP && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.Discussao_EsbocoProjeto).Count() > 0).ToList().Count();
    var anp_CP = Model.Where(p => p.TipoContratacao == TipoContratacao.ANP && p.Status.Count > 0 && p.Status.Where(s => s.Status == StatusProspeccao.ComProposta).Count() > 0).ToList().Count();

    decimal n_propostas = Model.Where(p => p.Status.Any(s => s.Status == StatusProspeccao.ComProposta)).Count();
    decimal n_convertidas = Model.Where(p => p.Status.Any(s => s.Status == StatusProspeccao.Convertida)).Count();
    decimal n_nao_convertidas = Model.Where(p => p.Status.Any(s => s.Status == StatusProspeccao.NaoConvertida)).Count();
    decimal n_canceladas = Model.Where(p => p.Status.Any(s => s.Status == StatusProspeccao.Suspensa)).Count();
    decimal n_prospeccoes_andamento = Model.Count() - n_convertidas - n_nao_convertidas - n_canceladas;
    decimal n_empresas = Model.Select(p => p.Empresa.EmpresaUnique).Distinct().Count();


    var avancadas = Model.Where(p => p.Status.Any(s => s.Status == StatusProspeccao.ComProposta));

    var valor_propostas = "---";

    TimeSpan diff;
    if (avancadas.Count() > 0)
    {
        diff = avancadas.Aggregate(new TimeSpan(0),
            (inicial, prospeccao) => prospeccao.Status.First().Data - prospeccao.Status.Last().Data,
            diff => diff);
        diff = new TimeSpan(diff.Ticks / avancadas.Count());
    }
    else
    {
        diff = new TimeSpan(0);
    }


    decimal taxa_conversao;
    try
    {
        taxa_conversao = (n_convertidas / (n_convertidas + n_nao_convertidas));
    }
    catch (Exception)
    {
        taxa_conversao = 1;
    }

    decimal infrutiferas = n_canceladas / (Model.Count() - (avancadas.Count() - n_convertidas - n_nao_convertidas));
}

<div class="row">
    <figure class="highcharts-figure col-12">
        <div id="funil"></div>
    </figure>

    <div class="col-6">
        <div id="tempo_SLA" class="jumbotron row text-center h-100">
            <div class="col-12">
                <h1 class="display-3"> @n_empresas</h1>
                <small>
                    Número de empresas prospectadas
                </small>
                <hr />
            </div>
            <div class="col-4">
                <h4> @diff.ToString("%d") dias</h4>
                <small>
                    Tempo médio entre o primeiro contato e a emissão da proposta.
                </small>
            </div>
            <div class="col-4">
                <h4> @Model.Count()</h4>
                <small>
                    Contatos iniciais de prospecção
                </small>
            </div>
            <div class="col-4">
                <h4> @infrutiferas.ToString("P2")</h4>
                <small>
                    Percentual de prospecções infrutíferas
                </small>
            </div>

        </div>
    </div>

    <figure class="highcharts-figure col-6">
        <div id="pizza_desistencia"></div>
    </figure>

    <figure class="highcharts-figure col-6">
        <div id="pizza_conversao"></div>
    </figure>


    <div class="col-6">
        <div id="taxa_conversao" class="row jumbotron text-center h-100">
            <div class="col-12">
                <h1 class="display-3"> @taxa_conversao.ToString("P2")</h1>
                <small>
                    Taxa de conversão de prospecções
                </small>
                <hr />
            </div>
            <div class="col-4">
                <!-- Quando transformar em calculado, remover o R$-->
                <h4> R$ @valor_propostas</h4>
                <small>
                    Ticket médio das prospecções
                </small>
            </div>

            <div class="col-4">
                <h4> @n_propostas</h4>
                <small>
                    Propostas comerciais enviadas
                </small>
            </div>
            <div class="col-4">
                <h4> @n_convertidas</h4>
                <small>
                    Projetos contratados
                </small>
            </div>
        </div>
    </div>

</div>

<!-- Gráfico de Fomentos por status-->
<script type="text/javascript">
    Highcharts.chart('funil', {
        chart: {
            type: 'column'
        },
        title: {
            text: 'Funil de Vendas'
        },
        xAxis: {
            categories: [
                "Contato inicial",
                "Em discussão: Busca de Literatura",
                "Em discussão: Draft de Ideias",
                "Em discussão: Definição de Desenho Experimental",
                "Em discussão: Esboço do Projeto",
                "Com Proposta",
                "Convertida",
            ],
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Ocorrências'
            }
        },
        tooltip: {
            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f} prospecções</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
        },
        plotOptions: {
            column: {
                pointPadding: 0.2,
                borderWidth: 0
            }
        },
        series: [{
            name: 'Contratação Direta',
            data: [@cd_CI,@cd_EDBL,@cd_EDDI, @cd_EDDDE, @cd_EDEP, @cd_CP]

        }, {
            name: 'Editais de Inovação SESI/SENAI',
            data: [@ei_CI,@ei_EDBL,@ei_EDDI, @ei_EDDDE, @ei_EDEP, @ei_CP]

        },
        {
            name: 'Agências de Fomento',
            data: [@af_CI,@af_EDBL,@af_EDDI, @af_EDDDE, @af_EDEP, @af_CP]

        }, {
            name: 'Embrapii',
            data: [@emb_CI,@emb_EDBL,@emb_EDDI, @emb_EDDDE, @emb_EDEP, @emb_CP]

        }, {
            name: 'A definir',
            data: [@ou_CI,@ou_EDBL,@ou_EDDI, @ou_EDDDE, @ou_EDEP, @ou_CP]

        },
         {
            name: 'Parceiros de Edital',
            data: [@par_CI,@par_EDBL,@par_EDDI, @par_EDDDE, @par_EDEP, @par_CP]

        }, {
            name: 'ANP/ANEEL',
            data: [@anp_CI,@anp_EDBL,@anp_EDDI, @anp_EDDDE, @anp_EDEP, @anp_CP]

        }]
    });
</script>
<!-- Pizzas -->
<script>
Highcharts.chart('pizza_conversao', {
    chart: {
        plotBackgroundColor: null,
        plotBorderWidth: null,
        plotShadow: false,
        type: 'pie'
    },
    title: {
        text: 'Status de Prospecções com propostas'
    },
    tooltip: {
        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
    },
    accessibility: {
        point: {
            valueSuffix: '%'
        }
    },
    plotOptions: {
        pie: {
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
                enabled: true,
                format: '<b>{point.name}</b>: {point.y} prospecções'
            }
        }
    },
    series: [{
        size: '60%',
        name: 'Propostas',
        colorByPoint: true,
        data: [{
            name: 'Em andamento',
            y: @(n_propostas - n_convertidas - n_nao_convertidas),
        }, {
            name: 'Convertidas',
            y: @n_convertidas
        }, {
            name: 'Não convertidas',
            y: @n_nao_convertidas
        }]
    }]
});


    Highcharts.chart('pizza_desistencia', {
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false,
            type: 'pie'
        },
        title: {
            text: 'Status geral das prospecções'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        accessibility: {
            point: {
                valueSuffix: '%'
            }
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                }
            }
        },
        series: [{
            size: '60%',
            name: 'Propostas',
            colorByPoint: true,
            data: [{
                name: 'Em andamento',
                y: @n_prospeccoes_andamento,
            }, {
                name: 'Encerradas',
                y: @(Model.Count() - n_prospeccoes_andamento),
            }
        ]
    }]
});
</script>


