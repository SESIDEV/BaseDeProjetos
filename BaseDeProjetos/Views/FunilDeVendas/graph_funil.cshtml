@model IEnumerable<BaseDeProjetos.Models.Prospeccao>
@using System
@using BaseDeProjetos.Helpers
<style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
        border: 3px solid;
    }
</style>
@{
    IEnumerable<BaseDeProjetos.Models.Prospeccao> prospeccoes = ViewData["ListaProspeccoes"] as IEnumerable<BaseDeProjetos.Models.Prospeccao>;
    Dictionary<string, int> contagem = new Dictionary<string, int>();

    foreach (TipoContratacao contratacao in Enum.GetValues(typeof(TipoContratacao)))
    {
        foreach (StatusProspeccao status in Enum.GetValues(typeof(StatusProspeccao)))
        {
            var key = contratacao.ToString() + "_" + status.ToString();
            contagem[key] = prospeccoes.Where(p => FunilHelpers.VerificarContratacao(p, contratacao) &&
            FunilHelpers.VerificarStatus(p, status)).ToList().Count();
        }
    }

    var prospeccoesAtivas = ViewData["ProspeccoesAtivas"] as List<Prospeccao>;
    var prospeccoesTotais = ViewData["ProspeccoesTotais"] as List<Prospeccao>;
    var prospeccoesNaoPlanejadas = ViewData["ProspeccoesNaoPlanejadas"] as List<Prospeccao>;
    var prospeccoesAvancadas = ViewData["ProspeccoesAvancadas"] as List<Prospeccao>;

    foreach (TipoContratacao contratacao in Enum.GetValues(typeof(TipoContratacao)))
    {
        foreach (StatusProspeccao status in Enum.GetValues(typeof(StatusProspeccao)))
        {
            var key = contratacao.ToString() + "_" + status.ToString() + "_Ativas";
            contagem[key] = prospeccoesAtivas.Where(p => FunilHelpers.VerificarContratacao(p, contratacao) &&
            FunilHelpers.VerificarStatus(p, status)).ToList().Count();
        }
    }

    float numProspeccoesTotais = prospeccoes.Count();
    float numPropostas = prospeccoes.Count(p => FunilHelpers.VerificarStatus(p, StatusProspeccao.ComProposta));
    float numPropostasAtivas = prospeccoes.Count(p => FunilHelpers.VerificarStatus(p, StatusProspeccao.ComProposta) && p.Status.All(s => s.Status < StatusProspeccao.Convertida));
    float numConvertidas = prospeccoes.Count(p => p.Status.Any(s => s.Status == StatusProspeccao.Convertida));
    float numNaoConvertidas = prospeccoes.Count(p => p.Status.Any(s => s.Status == StatusProspeccao.NaoConvertida));
    float numCanceladas = prospeccoes.Count(p => p.Status.Any(s => s.Status == StatusProspeccao.Suspensa));
    float numProspeccoesEmAndamento = numProspeccoesTotais - numConvertidas - numNaoConvertidas - numCanceladas;
    float numProspeccoesEmAndamentoComProposta = numPropostas - numConvertidas - numNaoConvertidas;
    float numEmpresas = prospeccoesNaoPlanejadas.Select(p => p.Empresa.EmpresaUnique).Distinct().Count();
    float numEmpresasAtivas = prospeccoesAtivas.Select(p => p.Empresa.EmpresaUnique).Distinct().Count();
    float numPlanejadas = prospeccoes.Count(p => p.Status.Any(s => s.Status == StatusProspeccao.Planejada));
    float numAvancadas = prospeccoesAvancadas.Count();
    float numConvertidasENaoConvertidas = numConvertidas + numNaoConvertidas;
    float numInfrutiferas = numCanceladas + numNaoConvertidas;
    float valorTotalPropostasAtivas = 0;
    float valorTotalPropostas = 0;

    double taxaConversao = (numConvertidas / numConvertidasENaoConvertidas);    
    double taxaInfrutiferas = numInfrutiferas / (numProspeccoesTotais - (numAvancadas - numConvertidas - numNaoConvertidas));

    foreach (Prospeccao prosp in prospeccoesAtivas)
    { 
        valorTotalPropostasAtivas += (float)prosp.ValorProposta; 
    }

    if (numPropostasAtivas > 0) { valorTotalPropostasAtivas = valorTotalPropostasAtivas / numPropostasAtivas; }

    foreach (Prospeccao prosp in prospeccoes)
    {
        valorTotalPropostas += (float)prosp.ValorProposta;
    }

    if (numPropostas > 0)
    {
        valorTotalPropostas = valorTotalPropostas / numPropostas;
    }

    string valorAtivasString = valorTotalPropostasAtivas.ToString("C2");
    string valorString = valorTotalPropostas.ToString("C2");

    TimeSpan DiferencaTodas = FunilHelpers.RetornarValorDiferencaTempo(prospeccoesAvancadas.ToList());
    TimeSpan DiferencaAtivas = FunilHelpers.RetornarValorDiferencaTempo(prospeccoesAtivas.Where(p => p.Status.Any(f => f.Status == StatusProspeccao.ComProposta)).ToList());

}

@if (numProspeccoesTotais > 1)
{
    <div class="pb-4">
        <div class="app-card app-card-chart shadow-sm h-100">
            <div class="app-card-header p-3">
                <h4 class="app-card-title">Funil de Vendas</h4>
            </div>
            <div class="app-card-body p-4">
                <figure class="highcharts-figure">
                    <div id="funil"></div>
                </figure>
            </div>
            <div class="p-4">
                <input class="form-check-input" type="checkbox" id="caixaSelecaoAtivas" onclick="marcada()">
                <label class="form-check-label" for="botao_ativas">Mostrar apenas as ativas</label>
            </div>
        </div>
    </div>

    <div class="pb-4">
        <div class="d-flex gap-4 justify-content-between align-items-start shadow-sm">
            <div class="app-card app-card-chart w-50 h-100">
                <div class="app-card-header p-3">
                    <h4 class="app-card-title">Indicadores de Prospecção</h4>
                </div>
                <div class="app-card-body row text-center p-3 p-lg-4">
                    <div class="col-12">
                        <!--[Iury] IDs da checkbox \/ -->
                    <h1 id="CheckboxProspAtivas1" class="display-3">@numEmpresas</h1>
                        <small id="CheckboxProspAtivas2">Número de empresas prospectadas</small>
                        <hr />
                    </div>
                    <div class="col-4">
                        <h4 id="CheckboxProspAtivas7">@Math.Abs(DiferencaTodas.Days) dias</h4>
                        <small id="CheckboxProspAtivas10">Tempo médio entre o primeiro contato e a emissão da
                            proposta</small>
                    </div>
                    <div class="col-4">
                        <!--[Iury] IDs da checkbox \/ -->
                    <h4 id="CheckboxProspAtivas4">@prospeccoesNaoPlanejadas.Count()</h4>
                        <small id="CheckboxProspAtivas3">Contatos iniciais de prospecção</small>
                    </div>
                    <div class="col-4">
                        <h4> @taxaInfrutiferas.ToString("P2")</h4>
                        <small>
                            Percentual de prospecções infrutíferas
                        </small>
                    </div>
                </div>
            </div>

            <div class="app-card app-card-chart w-50 h-100">
                <div class="app-card-header p-3">
                    <h4 class="app-card-title">Status Geral das Prospecções</h4>
                </div>
                <div class="app-card-body text-center p-3 p-lg-4">
                    <figure class="highcharts-figure">
                        <div id="pizza_desistencia"></div>
                    </figure>
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex gap-4 justify-content-between align-items-start shadow-sm">
        <div class="app-card app-card-chart w-50 h-100">
            <div class="app-card-header p-3">
                <h4 class="app-card-title">Status de Prospecções com Proposta</h4>
            </div>
            <div class="app-card-body text-center p-3 p-lg-4">
                <figure class="highcharts-figure">
                    <div id="pizza_conversao"></div>
                </figure>
            </div>
        </div>

        <div class="app-card app-card-chart w-50 h-100">
            <div class="app-card-header p-3">
                <h4 class="app-card-title">Status de Prospecções com Proposta</h4>
            </div>
            <div class="app-card-body row text-center p-3 p-lg-4">
                <div class="col-12">
                    <h1 class="display-3">@taxaConversao.ToString("P2")</h1>
                    <small>
                        Taxa de conversão de prospecções
                    </small>
                    <hr />
                </div>
                <div class="col-4">
                    <!-- Quando transformar em calculado, remover o R$-->
                    @if (valorTotalPropostas > 0)
                    {
                        <h4 id="CheckboxProspAtivas5">@valorTotalPropostas.ToString("C2")</h4>
                    }
                    else
                    {
                        <h4 id="CheckboxProspAtivas5">R$ ---</h4>
                    }
                    <small id="CheckboxProspAtivas8">
                        Ticket médio das prospecções
                    </small>
                </div>
                <div class="col-4">
                    <h4 id="CheckboxProspAtivas6">@numPropostas</h4>
                    <small id="CheckboxProspAtivas9">
                        Propostas comerciais enviadas
                    </small>
                </div>
                <div class="col-4">
                    <h4>@numConvertidas</h4>
                    <small>
                        Projetos contratados
                    </small>
                </div>
            </div>
        </div>


    </div>


    <!-- Gráfico de Fomentos por status-->
    <script type="text/javascript">

        const seriespadrao = [
            { name: 'Contratação Direta', data: [@contagem["ContratacaoDireta_ContatoInicial"], @contagem["ContratacaoDireta_Discussao_EsbocoProjeto"], @contagem["ContratacaoDireta_ComProposta"]] },
            { name: 'Editais de Inovação SESI/SENAI', data: [@contagem["EditalInovacao_ContatoInicial"], @contagem["EditalInovacao_Discussao_EsbocoProjeto"], @contagem["EditalInovacao_ComProposta"]] },
            { name: 'Agências de Fomento', data: [@contagem["AgenciaFomento_ContatoInicial"], @contagem["AgenciaFomento_Discussao_EsbocoProjeto"], @contagem["AgenciaFomento_ComProposta"] ] },
            { name: 'Embrapii', data: [@contagem["Embrapii_ContatoInicial"], @contagem["Embrapii_Discussao_EsbocoProjeto"], @contagem["Embrapii_ComProposta"] ] },
            { name: 'A definir', data: [@contagem["Indefinida_ContatoInicial"], @contagem["Indefinida_Discussao_EsbocoProjeto"], @contagem["Indefinida_ComProposta"] ] },
            { name: 'Parceiros de Edital', data: [@contagem["Parceiro_ContatoInicial"], @contagem["Parceiro_Discussao_EsbocoProjeto"], @contagem["Parceiro_ComProposta"] ] },
            { name: 'ANP/ANEEL', data: [@contagem["ANP_ContatoInicial"], @contagem["ANP_Discussao_EsbocoProjeto"], @contagem["ANP_ComProposta"] ] }
        ];

        var seriesativas = [
            { name: 'Contratação Direta', data: [@contagem["ContratacaoDireta_ContatoInicial_Ativas"], @contagem["ContratacaoDireta_Discussao_EsbocoProjeto_Ativas"], @contagem["ContratacaoDireta_ComProposta_Ativas"]] },
            { name: 'Editais de Inovação SESI/SENAI', data: [@contagem["EditalInovacao_ContatoInicial_Ativas"], @contagem["EditalInovacao_Discussao_EsbocoProjeto_Ativas"], @contagem["EditalInovacao_ComProposta_Ativas"]] },
            { name: 'Agências de Fomento', data: [@contagem["AgenciaFomento_ContatoInicial_Ativas"], @contagem["AgenciaFomento_Discussao_EsbocoProjeto_Ativas"], @contagem["AgenciaFomento_ComProposta_Ativas"] ] },
            { name: 'Embrapii', data: [@contagem["Embrapii_ContatoInicial_Ativas"], @contagem["Embrapii_Discussao_EsbocoProjeto_Ativas"], @contagem["Embrapii_ComProposta_Ativas"] ] },
            { name: 'A definir', data: [@contagem["Indefinida_ContatoInicial_Ativas"], @contagem["Indefinida_Discussao_EsbocoProjeto_Ativas"], @contagem["Indefinida_ComProposta_Ativas"] ] },
            { name: 'Parceiros de Edital', data: [@contagem["Parceiro_ContatoInicial_Ativas"], @contagem["Parceiro_Discussao_EsbocoProjeto_Ativas"], @contagem["Parceiro_ComProposta_Ativas"] ] },
            { name: 'ANP/ANEEL', data: [@contagem["ANP_ContatoInicial_Ativas"], @contagem["ANP_Discussao_EsbocoProjeto_Ativas"], @contagem["ANP_ComProposta_Ativas"] ] }
        ];

        var chart1 = Highcharts.chart('funil', {
            chart: { type: 'column', allowMutatingData: false },
            title: { text: null },
            xAxis: { categories: ["Contato inicial", "Em discussão", "Com Proposta", "Convertida",], },
            yAxis: { min: 0, title: { text: 'Ocorrências' } },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} prospecções</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: { column: { pointPadding: 0.2, borderWidth: 0 } },
            series: seriespadrao
        })

        <!-- Pizzas -->

        var pizzaDesistencia = Highcharts.chart('pizza_desistencia', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: null
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            accessibility: {
                point: {
                    valueSuffix: '%'
                }
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                    }
                }
            },
            series: [{
                size: '60%',
                name: 'Propostas',
                colorByPoint: true,
                data: [{
                    name: 'Em andamento',
                    y: @numProspeccoesEmAndamento,
                    drilldown: 'andamento'
                }, {
                    name: 'Convertidas',
                    y: @numConvertidas,
                    drilldown: null
                },
                {
                    name: 'Não Convertidas',
                    y: @numNaoConvertidas,
                    drilldown: null
                },
                {
                    name: 'Canceladas',
                    y: @numCanceladas,
                    drilldown: null
                },
                ],
            }],

            drilldown: {
                series: [
                    {
                        id: 'andamento',
                        data: [
                            ["Ativas",
        @(numProspeccoesEmAndamento)],
                            ["Com proposta",
        @(numPropostas)]
                        ]
                    }]
            }
        });

        var pizzaConversao = Highcharts.chart('pizza_conversao', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: 'Status de Prospecções com propostas'
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            accessibility: {
                point: {
                    valueSuffix: '%'
                }
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.y} prospecções'
                    }
                }
            },
            series: [{
                size: '60%',
                name: 'Propostas',
                colorByPoint: true,
                data: [{
                    name: 'Em andamento',
                    y: @(numProspeccoesEmAndamentoComProposta),
                }, {
                    name: 'Convertidas',
                    y: @numConvertidas
                }, {
                    name: 'Não convertidas',
                    y: @numNaoConvertidas
                }]
            }]
        });

    </script>

    <script type="text/javascript">
        function alterarTextos(statusfiltro) {
            if (!statusfiltro) {
                document.getElementById("CheckboxProspAtivas2").textContent = "Número de empresas prospectadas";
                document.getElementById("CheckboxProspAtivas3").textContent = "Contatos iniciais de prospecção";
                document.getElementById("CheckboxProspAtivas8").textContent = "Ticket médio das prospecções";
                document.getElementById("CheckboxProspAtivas9").textContent = "Propostas comerciais enviadas";
                document.getElementById("CheckboxProspAtivas10").textContent = "Tempo médio entre o primeiro contato e a emissão da proposta";
            }
            else {
                document.getElementById("CheckboxProspAtivas2").textContent += " (Ativas)";
                document.getElementById("CheckboxProspAtivas3").textContent += " (Ativas)";
                document.getElementById("CheckboxProspAtivas8").textContent += " (Ativas)";
                document.getElementById("CheckboxProspAtivas9").textContent += " (Ativas)";
                document.getElementById("CheckboxProspAtivas10").textContent += " (Ativas)";
            }
        }


        function marcada() {
            if (document.getElementById("caixaSelecaoAtivas").checked) {
                document.getElementById("CheckboxProspAtivas1").innerHTML = @numEmpresasAtivas;
                document.getElementById("CheckboxProspAtivas4").textContent = @prospeccoesAtivas.Count();
                document.getElementById("CheckboxProspAtivas5").textContent = "@valorAtivasString";
                document.getElementById("CheckboxProspAtivas6").textContent = @numPropostasAtivas;
                document.getElementById("CheckboxProspAtivas7").textContent = "@Math.Abs(DiferencaAtivas.Days) dias";
                alterarTextos(true)
                chart1.update({ series: seriesativas });
            } else {
                document.getElementById("CheckboxProspAtivas1").innerHTML = @numEmpresas;
                document.getElementById("CheckboxProspAtivas4").textContent = @prospeccoesNaoPlanejadas.Count();
                document.getElementById("CheckboxProspAtivas5").textContent = "@valorString";
                document.getElementById("CheckboxProspAtivas6").textContent = @numPropostas;
                document.getElementById("CheckboxProspAtivas7").textContent = "@Math.Abs(DiferencaTodas.Days) dias";
                alterarTextos(false)
                chart1.update({ series: seriespadrao });
            }
        }
    </script>
}
else
{
    <h3> Ainda não existem dados cadastrados. Esta aba aparecerá quando você tiver mais dados cadastrados.</h3>
}